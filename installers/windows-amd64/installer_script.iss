
; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "cmakeg"
#define MyAppVersion "0.0.3"
#define MyAppPublisher "AnnasVirtual"
#define MyAppURL "https://github.com/annasajkh/cmakeg"
#define MyAppExeName "cmakeg.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{AEB71EEB-59DD-4209-8075-3B39E8A2696F}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableDirPage=yes
UninstallDisplayIcon={app}\{#MyAppExeName}
; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=x64compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=..\..\LICENSE
OutputDir=..\..\installers\windows-amd64
OutputBaseFilename=cmakeg-0.0.3-win-x64-setup
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "..\..\build\windows-amd64\bin\cmakeg\release\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\..\build\windows-amd64\bin\cmakeg\Release\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"

[Code]
const
  WM_SETTINGCHANGE = $001A;

function SendMessageTimeout(hWnd: HWND; Msg: UINT; wParam: UINT_PTR; lParam: PAnsiChar; fuFlags: UINT; uTimeout: UINT; var lpdwResult: DWORD): BOOL;
  external 'SendMessageTimeoutA@user32.dll stdcall';

procedure RefreshEnvironment;
var
  S: AnsiString;
  MsgResult: DWORD;
begin
  S := 'Environment';
  SendMessageTimeout($FFFF, WM_SETTINGCHANGE, 0, PAnsiChar(S), 2, 5000, MsgResult);
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
    RefreshEnvironment;
end;

function RemoveTrailingBackslash(const S: string): string;
begin
  Result := S;
  if (Length(Result) > 0) and (Result[Length(Result)] = '\') then
    Delete(Result, Length(Result), 1);
end;

function SplitString(const S, Delimiter: string): TArrayOfString;
var
  I, Start, DelimLen: Integer;
  Temp: string;
begin
  SetArrayLength(Result, 0);
  if S = '' then Exit;
  
  DelimLen := Length(Delimiter);
  Start := 1;
  
  for I := 1 to Length(S) - DelimLen + 1 do
  begin
    if Copy(S, I, DelimLen) = Delimiter then
    begin
      Temp := Copy(S, Start, I - Start);
      SetArrayLength(Result, GetArrayLength(Result) + 1);
      Result[GetArrayLength(Result) - 1] := Temp;
      Start := I + DelimLen;
    end;
  end;
  
  // Add the last part
  Temp := Copy(S, Start, Length(S) - Start + 1);
  if Temp <> '' then
  begin
    SetArrayLength(Result, GetArrayLength(Result) + 1);
    Result[GetArrayLength(Result) - 1] := Temp;
  end;
end;

function NeedsAddPath(Param: string): boolean;
var
  OrigPath: string;
  ParamExpanded: string;
  Paths: TArrayOfString;
  I: Integer;
begin
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
    'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
    'Path', OrigPath) then
  begin
    Result := True;
    exit;
  end;

  ParamExpanded := ExpandConstant(Param);
  ParamExpanded := RemoveTrailingBackslash(ParamExpanded);

  Paths := SplitString(OrigPath, ';');
  
  for I := 0 to GetArrayLength(Paths) - 1 do
  begin
    if CompareText(RemoveTrailingBackslash(Trim(Paths[I])), ParamExpanded) = 0 then
    begin
      Result := False;
      exit;
    end;
  end;
  
  Result := True;
end;

[Registry]
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; \
    ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}"; \
    Check: NeedsAddPath('{app}')
