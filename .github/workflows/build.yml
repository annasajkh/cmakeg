name: Build The Program

on:
  push:
    tags:        
      - '*' 

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: windows-amd64
          - os: ubuntu-latest
            target: linux-x86_64
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get CMake
        uses: lukka/get-cmake@v4.0.3

      - name: Get python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.7'
      
      - name: "Install linux deps"
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get update && sudo apt-get install -y fakeroot binutils tar gzip bzip2 xz-utils zstd file libarchive-tools squashfs-tools

      - name: "Get ruby on linux" 
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.5'
          bundler-cache: true

      - name: "Build the program" 
        run: python build.py --build-type release --version ${{ github.ref_name }}

      - name: "Build windows installer for the program" 
        if: ${{ matrix.os == 'windows-latest' }}
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: installers/windows-amd64/installer_script.iss
      
      - name: "Install fpm"
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: gem install fpm && fpm --version
      
      - name: "Build linux installers"
        if: ${{ matrix.os == 'ubuntu-latest' }}
        working-directory: installers/linux-x86_64/
        run: python installer_script.py
      
      - name: Upload windows installer
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: installers/windows-amd64/*.exe
      
      - name: Upload linux installers
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            installers/linux-x86_64/*.deb
            installers/linux-x86_64/*.rpm
            installers/linux-x86_64/*.pkg.tar.zst

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download artifacts
      uses: actions/download-artifact@v5

    - name: Debug output
      run: ls -R installers/
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: python actions_utils/upload_to_github_release.py